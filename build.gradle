group 'ca.mcgill.science.ctf'
version '2.1.0'

buildscript {
    repositories {
        mavenCentral()
        maven { url "https://jitpack.io" }
        maven { url "https://plugins.gradle.org/m2/" } // for swagger
        jcenter()
    }
    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$KOTLIN"
        classpath "ca.mcgill:tepid-commons:$TEPID_COMMONS"
        classpath "io.swagger.core.v3:swagger-gradle-plugin:2.0.6"      // For Swagger
        classpath "org.jetbrains.kotlin:kotlin-noarg:$KOTLIN"   // For Hibernate
    }
}

apply plugin: 'java'
apply plugin: 'kotlin'
apply plugin: 'war'
apply plugin: 'ca.mcgill.science.tepid.commons'

apply plugin: "io.swagger.core.v3.swagger-gradle-plugin"    // For Swagger
apply plugin: "kotlin-jpa"                                  // For Hibernate

sourceCompatibility = JavaVersion.VERSION_11
war.baseName = 'tepid'

ext {
    // can be passed with -Ptepid_config_dir=CONFIG_DIR, or set in an environment variable "tepid_config_dir
    if (! project.hasProperty('tepid_config_dir')){
        tepid_config_dir = "$System.env.tepid_config_dir"
    }
    if (! project.hasProperty('tepid_config_dir')){
        println('WARN tepid_config_dir not found')
    }
}

repositories {
    mavenCentral()
    maven { url "https://jitpack.io" }
}

sourceSets {
    integrationTest {
        java.srcDirs = ['src/integration-test/java']
        resources.srcDir file('src/integration-test/resources')
        compileClasspath += sourceSets.main.output + sourceSets.test.output + configurations.testRuntimeClasspath
        runtimeClasspath += output + compileClasspath
    }
}

dependencies {
    integrationTestRuntime("org.junit.jupiter:junit-jupiter-engine:5.3.1")

    testCompileOnly(
            'junit:junit:4.12'
    )
    testRuntimeOnly(
            'org.junit.jupiter:junit-jupiter-engine:5.1.0',
            'org.junit.vintage:junit-vintage-engine:5.1.0'
    )
    testCompile "org.junit.jupiter:junit-jupiter-params:5.1.0"
    testCompile "org.junit.jupiter:junit-jupiter-engine:5.3.1"
    testCompile 'org.junit.jupiter:junit-jupiter-api:5.1.0'
    
    testCompile "org.jetbrains.kotlin:kotlin-test:${tepid.kotlin}"
    testCompile "org.jetbrains.kotlin:kotlin-test-junit:${tepid.kotlin}"
    testCompile "org.jetbrains.kotlin:kotlin-test-junit5:${tepid.kotlin}"
    testCompile "io.mockk:mockk:1.9"
    
    testCompile "ca.mcgill.tepid-commons:retrofit:$TEPID_COMMONS"
    testCompile "ca.mcgill.tepid-commons:test:$TEPID_COMMONS"
    


    compile "org.jetbrains.kotlin:kotlin-stdlib:${tepid.kotlin}"
    compile "org.jetbrains.kotlin:kotlin-reflect:${tepid.kotlin}"

    compile "ca.mcgill.tepid-commons:core:$TEPID_COMMONS"
    compile "ca.mcgill.tepid-commons:models:$TEPID_COMMONS"
    compile "ca.mcgill.tepid-commons:utils:$TEPID_COMMONS"

//    compile 'ca.allanwang.mcgill-data:ldap:949a32e'

    compile "com.fasterxml.jackson.core:jackson-annotations:${tepid.jackson}"
    compile "com.fasterxml.jackson.core:jackson-databind:${tepid.jackson}"
    compile "com.fasterxml.jackson.jaxrs:jackson-jaxrs-json-provider:${tepid.jackson}"
    compile "com.fasterxml.jackson.module:jackson-module-jaxb-annotations:${tepid.jackson}"
    compile "com.fasterxml.jackson.module:jackson-module-kotlin:${tepid.jackson}"
    compile "commons-beanutils:commons-beanutils:1.9.3"
    compile "javax.servlet:javax.servlet-api:4.0.0"
    compile "javax.ws.rs:javax.ws.rs-api:2.1"
    compile "org.apache.commons:commons-email:1.5"
    compile "javax.xml.bind:jaxb-api:2.3.0"
    compile "javax.activation:activation:1.1"
    compile "org.glassfish.hk2.external:aopalliance-repackaged:$GLASSFISH_HK2"
    compile "org.glassfish.hk2:hk2-locator:$GLASSFISH_HK2"
    compile "org.glassfish.jersey.inject:jersey-hk2:$GLASSFISH_JERSEY"
    compile "org.glassfish.jersey.containers:jersey-container-servlet:$GLASSFISH_JERSEY"
    compile "org.glassfish.jersey.core:jersey-common:$GLASSFISH_JERSEY"
    compile "org.glassfish.jersey.media:jersey-media-json-jackson:$GLASSFISH_JERSEY"
    compile "org.ow2.asm:asm-debug-all:5.2"
    compile "org.tukaani:xz:1.6"
    compile "com.google.code.findbugs:jsr305:3.0.2"
    

    compile group: 'javax.el', name: 'javax.el-api', version: '3.0.0'
    compile group: 'javax.servlet.jsp', name: 'javax.servlet.jsp-api', version: '2.3.1'

    // Swagger
    compile group: 'io.swagger.core.v3', name: 'swagger-jaxrs2', version:'2.0.0'
    compile group: 'io.swagger.core.v3', name: 'swagger-jaxrs2-servlet-initializer', version:'2.0.0'
    compile group: 'org.slf4j', name: 'slf4j-log4j12', version: '1.8.0-beta2'
    compile group: 'org.webjars', name: 'swagger-ui', version: '3.20.5'
    compile group: 'org.webjars', name:'webjars-servlet-2.x', version:'1.1'

    // Hibernate
    compile "org.hibernate:hibernate-core:5.4.1.Final"
//    compile "org.hibernate:hibernate-entitymanager:5.4.1.Final"
    compile "org.hibernate:hibernate-testing:5.4.1.Final"
    compile "com.h2database:h2:1.3.148"
    compile "org.postgresql:postgresql:42.2.5"
}

compileKotlin {
}
compileTestKotlin {
}
compileIntegrationTestKotlin{
}

test {
    useJUnitPlatform()
    dependsOn cleanTest
    testLogging.showStandardStreams = true
}

task integrationTest(type: Test) {
    dependsOn cleanIntegrationTest
    group = "verification"

    testClassesDirs = sourceSets.integrationTest.output.classesDirs
    classpath = sourceSets.integrationTest.runtimeClasspath
    testLogging.showStandardStreams = true
    outputs.upToDateWhen { false }

    mustRunAfter test
}

task copyConfigs(type: Copy) {
    println(tepid_config_dir)
    from "$tepid_config_dir/barcode.properties",
            "$tepid_config_dir/DB.properties",
            "$tepid_config_dir/LDAP.properties",
            "$tepid_config_dir/LDAPGroups.properties",
            "$tepid_config_dir/LDAPResource.properties",
            "$tepid_config_dir/LDAPTestUser.properties",
            "$tepid_config_dir/TEM.properties",
            "$tepid_config_dir/URL.properties"
    into "config"
}

war {

    from('config') {
        include '*.properties'
    }
}

resolve {
    classpath = sourceSets.main.runtimeClasspath
    resourcePackages = ['ca.mcgill.science.tepid.server.auth','ca.mcgill.science.tepid.server.server','ca.mcgill.science.tepid.server.rest']
    outputPath = ''
    outputFormat = 'JSONANDYAML'
    prettyPrint='TRUE'
}
